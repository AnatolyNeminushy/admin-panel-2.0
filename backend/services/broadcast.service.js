
// –°–µ—Ä–≤–∏—Å –º–∞—Å—Å–æ–≤—ã—Ö —Ä–∞—Å—Å—ã–ª–æ–∫ (Telegram / VK) —Å –º—è–≥–∫–∏–º —Ç—Ä–æ—Ç—Ç–ª–∏–Ω–≥–æ–º –∏ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ–º –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π.

const pool = require('../db');
const { normalizePlatform, variantsFor } = require('../utils/platform');

// Node 18+ –∏–º–µ–µ—Ç –≥–ª–æ–±–∞–ª—å–Ω—ã–π fetch. –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏ –ø–æ–¥—Å–∫–∞–∑—ã–≤–∞–µ–º, –µ—Å–ª–∏ –æ–∫—Ä—É–∂–µ–Ω–∏–µ —Å—Ç–∞—Ä–æ–µ.
const fetch = globalThis.fetch;
if (!fetch) {
  throw new Error(
    'Global fetch is not available. Use Node 18+ or polyfill (e.g., node-fetch).',
  );
}

// –ü–æ–¥–≥—Ä—É–∂–∞–µ–º –ª–æ–∫–∞–ª—å–Ω—ã–µ –∞–¥–∞–ø—Ç–µ—Ä—ã, –µ—Å–ª–∏ –æ–Ω–∏ –µ—Å—Ç—å.
// –û–Ω–∏ –ø–æ–∑–≤–æ–ª—è—é—Ç –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å —á–µ—Ä–µ–∑ –ª–æ–∫–∞–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏; –∏–Ω–∞—á–µ –ø–∞–¥–∞–µ–º –Ω–∞ REST API.
let tg = {};
let vk = {};
try {
  tg = require('./telegram.service');
} catch {
  /* noop */
}
try {
  vk = require('./vk.service');
} catch {
  /* noop */
}

// –ú—è–≥–∫–∏–π —Ç—Ä–æ—Ç—Ç–ª–∏–Ω–≥, —á—Ç–æ–±—ã –Ω–µ —Å–ª–æ–≤–∏—Ç—å –ª–∏–º–∏—Ç—ã.
const sleep = (ms) => new Promise((r) => setTimeout(r, ms));

/* ---------- –£—Ç–∏–ª–∏—Ç—ã —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è ---------- */

/**
 * –ë–µ–∑–æ–ø–∞—Å–Ω–æ —ç–∫—Ä–∞–Ω–∏—Ä—É–µ—Ç HTML-—Å–ø–µ—Ü—Å–∏–º–≤–æ–ª—ã –≤ —Å—Ç—Ä–æ–∫–µ.
 */
const escapeHtml = (s = '') =>
  String(s)
    .replace(/&/g, '&')
    .replace(/</g, '&lt;')
    .replace(/>/g, '&gt;')
    .replace(/"/g, '&quot;');

/**
 * –§–æ—Ä–º–∏—Ä—É–µ—Ç HTML-—Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è Telegram: <b>title</b>\ntext
 */
const buildMessage = (title, text) => {
  const t = (title || '').trim();
  const msg = (text || '').trim();
  if (t && msg) return `<b>${escapeHtml(t)}</b>\n${escapeHtml(msg)}`;
  if (t) return `<b>${escapeHtml(t)}</b>`;
  return escapeHtml(msg);
};

/**
 * –¢–µ–∫—Å—Ç, —Å–æ—Ö—Ä–∞–Ω—è–µ–º—ã–π –≤ –ë–î (–±–µ–∑ HTML). –£–¥–æ–±–Ω–æ –¥–ª—è –∞–¥–º–∏–Ω-–ª–æ–≥–∞.
 */
const buildLogText = ({ title, text, imageUrl }) => {
  const t = (title || '').trim();
  const msg = (text || '').trim();
  const lines = [];
  if (t) lines.push(t);
  if (msg) lines.push(msg);
  if (imageUrl) lines.push(`üì∑ ${imageUrl}`);
  return lines.join('\n\n');
};

/**
 * –£–ü–†–û–©–Å–ù–ù–ê–Ø –í–´–ë–û–†–ö–ê –ü–û–õ–£–ß–ê–¢–ï–õ–ï–ô.
 * –û–∂–∏–¥–∞–µ–º —Ç–∞–±–ª–∏—Ü—É chats(chat_id, platform, ...).
 * –ó–¥–µ—Å—å –ø—Ä–∏–º–µ–Ω—è–µ–º —Ç–æ–ª—å–∫–æ —Ñ–∏–ª—å—Ç—Ä –ø–æ –ø–ª–∞—Ç—Ñ–æ—Ä–º–µ –∏ limit. –û—Å—Ç–∞–ª—å–Ω—ã–µ —Ñ–∏–ª—å—Ç—Ä—ã ‚Äî –≤ –ø–ª–∞–Ω–∞—Ö.
 */
async function selectRecipients({ filters, platforms, limit }) {
  const params = [];
  const where = [];

  // –§–∏–ª—å—Ç—Ä –ø–æ –ø–ª–∞—Ç—Ñ–æ—Ä–º–µ –∏–∑ filters.platform (tg/vk) –∏–ª–∏ —á–µ–∫–±–æ–∫—Å–æ–≤ platforms.
  if (filters?.platform && filters.platform !== 'any') {
    const arr = variantsFor(filters.platform).map((s) => s.toLowerCase());
    params.push(arr);
    where.push(`LOWER(platform) = ANY($${params.length})`);
  } else if (Array.isArray(platforms) && platforms.length) {
    const arr = platforms.flatMap(variantsFor).map((s) => s.toLowerCase());
    params.push(arr);
    where.push(`LOWER(platform) = ANY($${params.length})`);
  }

  let sql = `
    SELECT chat_id, platform
    FROM chats
    ${where.length ? `WHERE ${where.join(' AND ')}` : ''}
    ORDER BY chat_id DESC
  `;
  if (limit && Number(limit) > 0) {
    params.push(Number(limit));
    sql += ` LIMIT $${params.length}`;
  }

  const { rows } = await pool.query(sql, params);
  return rows;
}

/** –û—Ç–ø—Ä–∞–≤–∫–∞ –≤ Telegram (—á–µ—Ä–µ–∑ –ª–æ–∫–∞–ª—å–Ω—ã–π –∞–¥–∞–ø—Ç–µ—Ä –∏–ª–∏ –Ω–∞–ø—Ä—è–º—É—é Bot API) */
async function sendTelegram(chatId, { title, text, imageUrl }) {
  if (tg?.sendMessageOrPhoto) {
    const message = buildMessage(title, text);
    return tg.sendMessageOrPhoto(chatId, {
      text: message,
      imageUrl,
      parse_mode: 'HTML',
    });
  }
  if (tg?.sendMessage) {
    const message = buildMessage(title, text);
    return tg.sendMessage(chatId, message, { parse_mode: 'HTML' });
  }

  const token =
    process.env.TELEGRAM_BOT_TOKEN ||
    process.env.TG_BOT_TOKEN ||
    process.env.BOT_TOKEN ||
    process.env.TG_TOKEN;

  if (!token) throw new Error('TG_BOT_TOKEN is not set');

  const message = buildMessage(title, text);

  if (imageUrl) {
    const r = await fetch(`https://api.telegram.org/bot${token}/sendPhoto`, {
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      body: JSON.stringify({
        chat_id: chatId,
        photo: imageUrl,
        caption: message,
        parse_mode: 'HTML',
      }),
    });
    const j = await r.json();
    if (!j.ok) throw new Error(j.description || 'tg sendPhoto failed');
    return j;
  }

  const r = await fetch(`https://api.telegram.org/bot${token}/sendMessage`, {
    method: 'POST',
    headers: { 'Content-Type': 'application/json' },
    body: JSON.stringify({
      chat_id: chatId,
      text: message,
      parse_mode: 'HTML',
    }),
  });
  const j = await r.json();
  if (!j.ok) throw new Error(j.description || 'tg sendMessage failed');
  return j;
}

/** –û—Ç–ø—Ä–∞–≤–∫–∞ –≤–æ VK (—á–µ—Ä–µ–∑ –ª–æ–∫–∞–ª—å–Ω—ã–π –∞–¥–∞–ø—Ç–µ—Ä –∏–ª–∏ –Ω–∞–ø—Ä—è–º—É—é messages.send) */
async function sendVK(userId, { title, text, imageUrl }) {
  const message = (title ? `${title}\n\n` : '') + (text || '');

  if (vk?.sendMessageSimple) {
    return vk.sendMessageSimple(userId, { text: message, imageUrl });
  }
  if (vk?.sendMessage) {
    return vk.sendMessage(userId, message);
  }

  const token = process.env.VK_GROUP_TOKEN;
  const groupId = process.env.VK_GROUP_ID;
  if (!token || !groupId) throw new Error('VK credentials not set');

  const url = 'https://api.vk.com/method/messages.send?v=5.199';
  const params = new URLSearchParams({
    access_token: token,
    random_id: Math.floor(Math.random() * 1e12).toString(),
    user_id: String(userId),
    message,
    group_id: String(groupId),
  });

  const r = await fetch(url, { method: 'POST', body: params });
  const j = await r.json();
  if (j.error) throw new Error(j.error.error_msg || 'vk send failed');
  return j;
}

/**
 * –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–¥–Ω–æ–º—É –ø–æ–ª—É—á–∞—Ç–µ–ª—é –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –ø–ª–∞—Ç—Ñ–æ—Ä–º—ã.
 */
async function sendOne(recipient, payload) {
  const plat = normalizePlatform(recipient.platform); // 'telegram' ‚Üí 'tg', 'vk' ‚Üí 'vk'
  if (plat === 'tg') return sendTelegram(recipient.chat_id, payload);
  if (plat === 'vk') return sendVK(recipient.chat_id, payload);
  throw new Error(`Unsupported platform: ${recipient.platform}`);
}

/**
 * –ü—É–±–ª–∏—á–Ω–∞—è –≤—ã–±–æ—Ä–∫–∞ –±–µ–∑ –æ—Ç–ø—Ä–∞–≤–∫–∏ (–¥–ª—è –ø—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Å–ø–∏—Å–∫–∞ –ø–æ–ª—É—á–∞—Ç–µ–ª–µ–π).
 */
async function previewRecipients({ filters, platforms, limit }) {
  const rows = await selectRecipients({
    filters: filters || { onlyActiveDays: 90, minOrders: 0, platform: 'any' },
    platforms:
      Array.isArray(platforms) && platforms.length ? platforms : ['tg', 'vk'],
    limit: Number(limit) || 200,
  });
  return rows || [];
}

/**
 * –û—Å–Ω–æ–≤–Ω–æ–π –ø–∞–π–ø–ª–∞–π–Ω —Ä–∞—Å—Å—ã–ª–∫–∏.
 * mode:
 *  - 'all'      ‚Äî –≤—Å–µ–º –ø–æ —Ñ–∏–ª—å—Ç—Ä–∞–º
 *  - 'limit'    ‚Äî –ø–µ—Ä–≤—ã–º N –ø–æ —Ñ–∏–ª—å—Ç—Ä–∞–º (–∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è limit)
 *  - 'selected' ‚Äî –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–º chat_id (recipientIds)
 */
async function runBroadcast({
  title = '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è',
  text = '',
  imageUrl = null,
  platforms = ['tg'],
  filters = { onlyActiveDays: 90, minOrders: 0, platform: 'any' },
  testMode = true,
  mode = 'all',
  limit = null,
  recipientIds = [],
}) {
  const allowed = ['tg', 'vk'];
  const plats = platforms.map(normalizePlatform).filter((p) => allowed.includes(p));
  if (!plats.length) {
    return {
      error: '–ù–µ –≤—ã–±—Ä–∞–Ω–∞ –ø–ª–∞—Ç—Ñ–æ—Ä–º–∞',
      testMode,
      total: 0,
      sent: 0,
      failed: 0,
      items: [],
      mode,
    };
  }

  let recipients = [];
  if (mode === 'selected' && Array.isArray(recipientIds) && recipientIds.length) {
    const { rows } = await pool.query(
      `
        SELECT chat_id, platform
        FROM chats
        WHERE chat_id::text = ANY($1::text[])
      `,
      [recipientIds.map(String)],
    );
    recipients = rows;
  } else {
    const lim = mode === 'limit' ? Number(limit) || null : null;
    recipients = await selectRecipients({
      filters,
      platforms: plats,
      limit: lim,
    });
  }

  const result = {
    title,
    testMode,
    total: recipients.length,
    sent: 0,
    failed: 0,
    items: [],
    mode,
  };

  if (testMode || !recipients.length) {
    // –í —Ç–µ—Å—Ç–æ–≤–æ–º —Ä–µ–∂–∏–º–µ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º —Ç–æ–ª—å–∫–æ —Å—á—ë—Ç—á–∏–∫–∏ (–±–µ–∑ —Ä–µ–∞–ª—å–Ω—ã—Ö –æ—Ç–ø—Ä–∞–≤–æ–∫)
    return result;
  }

  const payload = {
    title: String(title || ''),
    text: String(text || ''),
    imageUrl: imageUrl || null,
  };

  // –ü—Ä–æ—Å—Ç–∞—è –ø–æ—à—Ç—É—á–Ω–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞ —Å –ø–∞—É–∑–æ–π (–º–∏–Ω–∏–º–∏–∑–∏—Ä—É–µ–º —Ä–∏—Å–∫–∏ –ª–∏–º–∏—Ç–æ–≤)
  for (const r of recipients) {
    try {
      await sendOne(r, payload);

      // –ü–∏—à–µ–º –≤ –ë–î, —á—Ç–æ–±—ã —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ—è–≤–∏–ª–æ—Å—å –≤ –∞–¥–º–∏–Ω-—á–∞—Ç–µ
      await pool.query(
        `
          INSERT INTO messages (chat_id, from_me, text, date)
          VALUES ($1, $2, $3, NOW())
        `,
        [r.chat_id, true, buildLogText(payload)],
      );

      result.sent += 1;
      result.items.push({ chat_id: r.chat_id, platform: r.platform, ok: true });
    } catch (e) {
      result.failed += 1;
      result.items.push({
        chat_id: r.chat_id,
        platform: r.platform,
        ok: false,
        detail: e?.message || 'send failed',
      });
    }
    await sleep(350);
  }

  return result;
}

module.exports = { runBroadcast, previewRecipients };
