/**
 * Общие типы для страницы рассылки.
 *
 * Зачем это нужно:
 * - Централизуем «язык» между UI и API, чтобы компоненты, хранилища и эффекты говорили об одном и том же.
 * - Типы отражают реальные ответы бэкенда, включая nullable-поля — так мы не теряем семантику и избегаем
 *   «магических» преобразований в рантайме.
 */

/** Ключи поддерживаемых платформ доставки (telegram / vk). */
export type PlatformKey = "tg" | "vk";

/**
 * Булевое состояние платформ по ключам.
 * Пример: `{ tg: true, vk: false }` — отправлять только в Telegram.
 */
export type PlatformState = Record<PlatformKey, boolean>;

/**
 * Фильтр по платформе в сегментации получателей:
 * - `"any"` — не ограничивать по платформе,
 * - конкретный ключ платформы — фильтровать строго по нему.
 */
export type RecipientPlatformFilter = "any" | PlatformKey;

/**
 * Набор фильтров сегментации для построения аудитории рассылки.
 * - `onlyActiveDays`: сколько дней пользователь был активен (минимум),
 * - `minOrders`: минимальное число заказов,
 * - `platform`: платформа-таргет (или "any").
 */
export interface MailingFilters {
  /** Минимальный срок активности пользователя в днях. */
  onlyActiveDays: number;
  /** Нижняя граница количества заказов. */
  minOrders: number;
  /** Платформа-таргет или «без ограничения». */
  platform: RecipientPlatformFilter;
}

/**
 * Режим отправки:
 * - `"all"` — всем из рассчитанного сегмента,
 * - `"limit"` — ограниченному числу (например, для прогрева),
 * - `"selected"` — явно выбранным пользователям (ручной список).
 */
export type SendMode = "all" | "limit" | "selected";

/** Идентификатор чата может приходить строкой или числом из разных источников. */
export type ChatId = string | number;

/**
 * Короткая сводка по получателю (для предпросмотра и dry-run).
 * Нестандартные поля с бэка допускаются — сохраняем через индекс-сигнатуру.
 */
export interface RecipientSummary {
  /** Внешний идентификатор чата/пользователя в конкретной платформе. */
  chat_id: ChatId;
  /** Строго типизированная платформа (если известна). */
  platform?: PlatformKey;
  /** Дополнительные атрибуты, которые может вернуть API. */
  [key: string]: unknown;
}

/**
 * Элемент прогресса отправки по конкретному получателю.
 * Поля помечены опциональными, так как бэк может присылать их не всегда или возвращать null.
 */
export interface BroadcastProgressItem {
  /** Получатель, может отсутствовать в агрегированных событиях. */
  chat_id?: ChatId;
  /** Платформа доставки. */
  platform?: PlatformKey;
  /** Флаг успешной отправки. */
  ok?: boolean;
  /** Диагностика при ошибке (например, причина блокировки), может быть null. */
  detail?: string | null;
  /** Произвольные дополнительные поля от бэкенда. */
  [key: string]: unknown;
}

/**
 * Агрегированное состояние прогресса рассылки.
 * Важный момент:
 * - Числовые счётчики и строки помечены как `| null`, т.к. на старте
 *   бэк может возвращать «ещё не посчитано». Это честнее, чем «0 по умолчанию».
 * - `items` делаем `readonly`-массивом — прогресс считается иммутабельно, удобнее для React.
 */
export interface BroadcastProgress {
  /** Глобальная ошибка по всей рассылке (если произошла). */
  error?: string | null;
  /** Всего получателей в батче. */
  total?: number | null;
  /** Сколько успешно отправлено. */
  sent?: number | null;
  /** Сколько не удалось отправить. */
  failed?: number | null;
  /** Использованный режим отправки. */
  mode?: SendMode | null;
  /** Запускалось ли в тестовом режиме (без реальной отправки). */
  testMode?: boolean | null;
  /** Подробный поминутный/поштучный прогресс по получателям. */
  items?: readonly BroadcastProgressItem[] | null;
}
