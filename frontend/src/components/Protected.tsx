import { type ReactElement } from "react";
import { Navigate, useLocation } from "react-router-dom";

import { useAuth } from "../context/useAuth";

/**
 * Компонент-гарда маршрутов (Protected).
 *
 * Зачем:
 * - Оборачивает приватные страницы и впускает внутрь только авторизованных пользователей.
 * - Удобная точка контроля доступа: меньше условной логики в самих страницах.
 *
 * Как работает:
 * 1) Ждём инициализацию контекста авторизации (`ready`). Пока он не готов — ничего не рендерим,
 *    чтобы избежать «моргания» защищённого контента.
 * 2) Если пользователь не авторизован — делаем редирект на `/login` и передаём `state.from`
 *    с исходным маршрутом. Это позволяет после логина вернуть пользователя туда, куда он шёл.
 * 3) Если всё ок — отдаём `children` без изменений.
 *
 * Нюансы (важные и неочевидные моменты):
 * - `state={{ from: location }}` — ключевая деталь для «возврата» после логина. На странице логина
 *   можно прочитать `const from = (location.state as any)?.from ?? '/'` и после успешной авторизации
 *   сделать `navigate(from, { replace: true })`.
 * - `replace` в `<Navigate>` не засоряет историю: пользователь не сможет вернуться «Назад» в защищённый
 *   маршрут, если ещё не вошёл.
 * - Возврат `null` при `!ready` умышленный: рендерим «пусто», чтобы не светить приватные элементы.
 *   Если нужен визуальный индикатор — можно обернуть Protected снаружи в локальный спиннер.
 */

interface ProtectedProps {
  /** Рендер одного дочернего элемента — защищаемый экран/раздел */
  children: ReactElement;
}

export default function Protected({ children }: Readonly<ProtectedProps>): ReactElement | null {
  const { user, ready } = useAuth();
  const location = useLocation();

  if (!ready) {
    // Контекст авторизации ещё инициализируется — ничего не показываем
    return null;
  }

  if (!user) {
    // Не авторизован: уводим на логин и запоминаем, откуда пришли
    return <Navigate to="/login" replace state={{ from: location }} />;
  }

  // Авторизован: пропускаем к защищённому контенту
  return children;
}
